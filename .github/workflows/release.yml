name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Run tests
        run: cargo test --verbose
      - name: Run security audit
        uses: EmbarkStudios/cargo-deny-action@v2.0.11
        with:
          command: check advisories bans licenses sources
        continue-on-error: true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Install dependencies
        run: npm clean-install
      - name: Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if npx semantic-release; then
            echo "released=true" >> $GITHUB_OUTPUT
            VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Release created with version: $VERSION"
          else
            echo "released=false" >> $GITHUB_OUTPUT
            echo "No release created"
          fi

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    needs: release
    if: needs.release.outputs.released == 'true'
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - os: ubuntu-latest
            build-script: ./build-linux.sh
            artifact-name: linux
            archive-cmd: tar -czf
            archive-ext: tar.gz
          - os: macos-latest
            build-script: ./build-macos.sh
            artifact-name: macos
            archive-cmd: tar -czf
            archive-ext: tar.gz
          - os: windows-latest
            build-script: .\build-windows.bat
            artifact-name: windows
            archive-ext: zip
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Make build scripts executable (Unix)
        if: runner.os != 'Windows'
        run: chmod +x ${{ matrix.build-script }}
      - name: Build with OS-specific script
        run: ${{ matrix.build-script }}
      - name: Archive build artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          cd build
          ${{ matrix.archive-cmd }} ../${{ matrix.artifact-name }}-binaries-${{ needs.release.outputs.version }}.${{ matrix.archive-ext }} *
      - name: Archive build artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build
          Compress-Archive -Path * -DestinationPath ../${{ matrix.artifact-name }}-binaries-${{ needs.release.outputs.version }}.${{ matrix.archive-ext }}
      - name: Upload archived artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.release.outputs.version }}
          files: ${{ matrix.artifact-name }}-binaries-${{ needs.release.outputs.version }}.${{ matrix.archive-ext }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
